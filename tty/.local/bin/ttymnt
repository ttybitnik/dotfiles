#!/bin/sh

# Manage LUKS devices, ensuring open/close process and supporting '<key>.gpg'.
#   Dependencies:
#     /usr/local/lib/tty.sh
#     /etc/fstab for specifying mounting options
#     ~/.ttymnt.gpg for setting devices info
#   Structure:
#     device_name device mount_point key_path(optional)

. /usr/local/lib/tty.sh

: "${ROOT_CMD:=sudo}"

readonly DEVICES_FILE="${HOME}/.ttymnt.gpg"

action="$1"
device_name="$2"
# OPT(gpg): d=decrypt
device_gpg=$(gpg -d "$DEVICES_FILE")
device_info=$(printf "%s" "$device_gpg" | grep "^$device_name")

validate() {
    if [ ! -f "$DEVICES_FILE" ]; then
	tty_fatal "%s: device info file not found" "$(basename "$0")"
    fi

    if [ -z "$device_info" ]; then
	tty_fatal "%s: device not found: '%s'" "$(basename "$0")" "$device_name"
    fi

    if [ "$#" -ne 2 ]; then
	tty_usage "%s <open|close> <device_name>" "$(basename "$0")"
    fi
}

open_device() {
    device_info_open="$1"

    # Field splitting with heredocs since POSIX sh does not support herestring
    # OPT(read): r=no-backslashes
    IFS=' ' read -r device_name device mount_point key_path <<EOF
$device_info_open
EOF

    if [ -b "/dev/disk/by-uuid/$device" ]; then
	if [ -n "$key_path" ]; then
	    # OPT(gpg): d=decrypt
	    gpg -d "$key_path" \
		| "$ROOT_CMD" cryptsetup --key-file=- open \
			      UUID="$device" "$device_name"
	    "$ROOT_CMD" mount "$mount_point"
	else
	    "$ROOT_CMD" cryptsetup open UUID="$device" "$device_name"
	    "$ROOT_CMD" mount "$mount_point"
	fi
	tty_info "%s: device '%s' opened: '%s'" \
		 "$(basename "$0")" "$device_name" "$mount_point"
    else
	tty_fatal "%s: block device not found: '%s'" \
		  "$(basename "$0")" "$device"
    fi
}

close_device() {
    device_info_close="$1"

    # Field splitting with heredocs since POSIX sh does not support herestring
    IFS=' ' read -r device_name _ mount_point _ <<EOF
$device_info_close
EOF

    if [ -d "$mount_point" ]; then
	"$ROOT_CMD" umount "$mount_point"
	"$ROOT_CMD" cryptsetup close "$device_name"
	tty_info "%s: device '%s' unmonted and closed: '%s'" \
		 "$(basename "$0")" "$device_name" "$mount_point"
    else
	tty_fatal "%s: invalid mount point: '%s'" \
		  "$(basename "$0")" "$mount_point"
    fi
}

main() {
    case "$action" in
	"open")
	    open_device "$device_info"
	    ;;
	"close")
	    close_device "$device_info"
	    ;;
	*)
	    tty_error "%s: invalid action: '%s'" "$(basename "$0")" "$action"
	    tty_usage "%s <open|close> <device_name>" "$(basename "$0")"
	    ;;
    esac
}

validate "$@"
main
