#!/usr/bin/env bash

# Switch globally between dark/light mode of selected theme family.
#   Globals:
#     CUSTOM_SWITCHER
#   Dependencies:
#     /usr/local/lib/tty.sh

source /usr/local/lib/tty.sh

readonly CONFIG_DIR="${HOME}/.config"
readonly THEMES_DIR="${CONFIG_DIR}/switcher"
readonly CURRENT_THEME="$THEMES_DIR/current"
readonly STATE_FILE="$CUSTOM_SWITCHER"
readonly THEME_FILE="${THEMES_DIR}/.switcher_theme"
readonly DEFAULT_SKIP=0
readonly DEFAULT_CHANGE=0
readonly DEFAULT_THEME="modus"
readonly SCRIPT="${0##*/}"

print_help()
{
    cat <<EOF
Usage: $SCRIPT [-c] [-s]

Switch globally between dark/light mode of selected theme family.

Options:
  -c               Change the current theme family.
  -s               Skip application reload after switching.
  -h               Display this help.
EOF
}

switcher_links()
{
    local theme_family_dir="$THEMES_DIR/$theme_family"

    toggle=$(cat "$STATE_FILE" 2>/dev/null)
    if [[ -z "$toggle" ]]; then
        toggle="light"
    fi

    if (("$change" == 1)); then
        variant="$toggle"

        printf "%s\n" \
               "No man ever steps in the same river twice," \
               "for it's not the same river and he's not the same man."
        printf "\n"
        printf "— Heraclitus\n"

    elif [[ "$toggle" == dark ]]; then
        variant="light"

        printf "%s\n" \
               "We can easily forgive a child who is afraid of the dark;" \
               "the real tragedy of life is when men are afraid of the light."
        printf "\n"
        printf "— Plato\n"

    elif [[ "$toggle" == light ]]; then
        variant="dark"

        printf "%s\n" \
               "Darkness now rose, as daylight" \
               "sunk, and brought in low'ring" \
               "night her shadowy offspring."
        printf "\n"
        printf "— John Milton\n"

    else
        tty_fatal "configuration files not found: check '%s'" "${STATE_FILE}"
    fi

    ln -sfn "$theme_family_dir" "$CURRENT_THEME"

    # Note to future self: you cannot improve this logic dynamically since not
    # all applications have a config include/import directive. Let it be.
    ln -sf "${CURRENT_THEME}/gtk-3.0/switcher-${variant}" "${CONFIG_DIR}/gtk-3.0/settings.ini"
    ln -sf "${CURRENT_THEME}/emacs/switcher-${variant}"   "${HOME}/.emacs.d/local/switcher.el"
    ln -sf "${CURRENT_THEME}/foot/switcher-${variant}"    "${CONFIG_DIR}/foot/switcher.ini"
    ln -sf "${CURRENT_THEME}/rofi/switcher-${variant}"    "${CONFIG_DIR}/rofi/switcher.rasi"
    ln -sf "${CURRENT_THEME}/dunst/switcher-${variant}"   "${CONFIG_DIR}/dunst/dunstrc.d/80-switcher.conf"
    ln -sf "${CURRENT_THEME}/sway/switcher-${variant}"    "${CONFIG_DIR}/sway/switcher"
    ln -sf "${CURRENT_THEME}/waybar/switcher-${variant}"  "${CONFIG_DIR}/waybar/switcher.css"

    gsettings set org.gnome.desktop.interface color-scheme "prefer-${variant}"

    printf "%s" "$variant" >"$STATE_FILE"
}

switcher_reload()
{
    # OPT(emacsclient): e=eval
    if ! swaymsg >/dev/null 2>&1  reload; then
        tty_notify_error "%s: swaymsg reload failed with non-zero exit code" \
                         "$SCRIPT"
    fi

    emacsclient -e "(config-reload/ttybitnik)" >/dev/null 2>&1 &

    # TODO: Perhaps file a feature request. Apparently, foot does not reload
    # configs on USR1/USR2, it only switches between pre-loaded colors/colors2
    # sections. This requires both variants to be in a single config file,
    # making it harder to switch/maintain different theme options. Ideally,
    # signals would trigger a config reload including imported files IMO.
    #
    # See issues and PRs in CHANGELOG for versions 1.23-1.24.
    # https://codeberg.org/dnkl/foot/src/branch/master/CHANGELOG.md#1-23-1
    if [[ "$toggle" == dark ]]; then
        killall -USR1 foot >/dev/null 2>&1 || true
    else
        killall -USR2 foot >/dev/null 2>&1 || true
    fi

    killall dunst >/dev/null 2>&1 || true
    dunst >/dev/null 2>&1 &
}

switcher_change()
{
    local selector_prompt="Select theme family: "
    local available_themes

    available_themes=$(
        find "$THEMES_DIR/" \
             -maxdepth 1 \
             -type d \
             -not -name "$SCRIPT" \
             -exec basename {} \;
    )

    theme_family=$(
        printf "%s\n" "$available_themes" | fzf --prompt="$selector_prompt"
    )

    printf "%s" "$theme_family" >"$THEME_FILE"

    killall foot >/dev/null 2>&1 || true
}

while getopts ":csh" opt; do
    case $opt in
        c)
            OPT_CHANGE=1
            ;;
        s)
            OPT_SKIP=1
            ;;
        h)
            print_help
            exit 0
            ;;
        \?)
            trap print_help EXIT
            tty_fatal "%s: invalid option: '-%s'" "$SCRIPT" "$OPTARG"
            ;;
        :)
            trap print_help EXIT
            tty_fatal "%s: option requires an argument: '-%s'" \
                      "$SCRIPT" "$OPTARG"
            ;;
    esac
done
shift $((OPTIND - 1))

if (("$#" != 0)); then
    trap print_help EXIT
    tty_fatal "%s: wrong number of arguments" "$SCRIPT"
fi

theme_family=$(cat "$THEME_FILE" 2>/dev/null) || theme_family="$DEFAULT_THEME"

change="${OPT_CHANGE:-$DEFAULT_CHANGE}"
if [[ "$change" = 1 ]]; then
    switcher_change
    tty_notify_info "%s: theme familly changed: '%s'" "$SCRIPT" "$theme_family"
fi

if ! switcher_links; then
    tty_notify_fatal "%s: switcher_links failed with non-zero exit code" \
                     "$SCRIPT"
fi

skip="${OPT_SKIP:-$DEFAULT_SKIP}"
if [[ "$skip" != 1 ]]; then
    switcher_reload
    tty_notify_info "%s: color scheme reloaded: '%s'" "$SCRIPT" "$variant"
fi
